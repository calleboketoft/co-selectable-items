/// <reference path="../../../typings/main/ambient/jasmine/jasmine.d.ts" />
"use strict";
var testing_1 = require('angular2/testing');
var fixtures_1 = require('./fixtures');
var co_selectable_items_cmp_1 = require('../../co-selectable-items/co-selectable-items-cmp');
testing_1.describe('CoSelectableItemsCmp', function () {
    testing_1.it('Should be defined', function () {
        testing_1.expect(co_selectable_items_cmp_1.CoSelectableItemsCmp).toBeDefined();
    });
    testing_1.it('Should initialise values correctly', function () {
        var cmp = initCmp();
        testing_1.expect(fixtures_1.default().initDone).toEqual(cmp.selectableItems);
    });
    testing_1.it('Should initialise values correctly even if object properties are ordered differently', function () {
        var cmp = initCmp(null, fixtures_1.default().initSelectedDifferentPropOrder);
        testing_1.expect(fixtures_1.default().initDone).toEqual(cmp.selectableItems);
    });
    testing_1.it('Should be able to filter on exact partial match', function () {
        var cmp = new co_selectable_items_cmp_1.CoSelectableItemsCmp();
        var matched = cmp.filterItem('SomeString', 'Some');
        testing_1.expect(matched).toBe(true);
    });
    testing_1.it('Should be able to filter on case insensitive partial match', function () {
        var cmp = new co_selectable_items_cmp_1.CoSelectableItemsCmp();
        var matched = cmp.filterItem('SomeString', 'so');
        testing_1.expect(matched).toBe(true);
    });
    testing_1.it('Should not hide selectable when filtering selected', function () {
        var cmp = new co_selectable_items_cmp_1.CoSelectableItemsCmp();
        var selectableList = fixtures_1.default().filterIsolatedBefore;
        cmp.filterSelected(selectableList, 'Random');
        var selectedExpected = fixtures_1.default().filterIsolatedSelectedAfter;
        testing_1.expect(selectableList).toEqual(selectedExpected);
    });
    testing_1.it('Should not hide selected when filtering selectable', function () {
        var cmp = new co_selectable_items_cmp_1.CoSelectableItemsCmp();
        var selectableList = fixtures_1.default().filterIsolatedBefore;
        cmp.filterSelectable(selectableList, 'Random');
        testing_1.expect(selectableList).toEqual(fixtures_1.default().filterIsolatedSelectableAfter);
    });
    testing_1.it('Should be able to select item', function () {
        var cmp = initCmp();
        cmp.selectItem(cmp.selectableItems[1]);
        testing_1.expect(cmp.selectedItems).toEqual(fixtures_1.default().selectedBearSelected);
        testing_1.expect(cmp.selectableItems).toEqual(fixtures_1.default().selectedBearSelectable);
    });
    testing_1.it('Should be able to deselect item', function () {
        var cmp = initCmp();
        cmp.deselectItem(cmp.selectableItems[2]);
        testing_1.expect(cmp.selectedItems).toEqual(fixtures_1.default().deselectedCactusSelected);
        testing_1.expect(cmp.selectableItems).toEqual(fixtures_1.default().deselectedCactusSelectable);
    });
    testing_1.it('Should deselect item even if object properties are ordered differently', function () {
        var cmp = initCmp(null, fixtures_1.default().initSelectedDifferentPropOrder);
        cmp.deselectItem(cmp.selectableItems[2]);
        testing_1.expect(cmp.selectedItems).toEqual(fixtures_1.default().deselectedCactusSelected);
        testing_1.expect(cmp.selectableItems).toEqual(fixtures_1.default().deselectedCactusSelectable);
    });
    testing_1.it('Should be able to select all filtered in selectable', function () {
        var cmp = initCmp();
        cmp.filterSelectable(cmp.selectableItems, 'a');
        cmp.selectAllFiltered();
        testing_1.expect(cmp.selectableItems).toEqual(fixtures_1.default().selectFilteredSelectable);
        testing_1.expect(cmp.selectedItems).toEqual(fixtures_1.default().selectFilteredSelected);
    });
    testing_1.it('Should be able to deselect all filtered in selected', function () {
        var cmp = initCmp();
        cmp.filterSelected(cmp.selectableItems, 'ac');
        cmp.deselectAllFiltered();
        testing_1.expect(cmp.selectableItems).toEqual(fixtures_1.default().deselectFilteredSelectable);
        testing_1.expect(cmp.selectedItems).toEqual(fixtures_1.default().deselectFilteredSelected);
    });
    // Rules for hiding items
    testing_1.it('Should hide selected items from the selectable list', function () {
        var cmp = initCmp();
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemSelectedNoFilter, 'selectable')).toBe(true);
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemSelectedFilteredOutSelected, 'selectable')).toBe(true);
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemSelectedFilteredOutSelectable, 'selectable')).toBe(true);
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemSelectedFilteredOutBoth, 'selectable')).toBe(true);
    });
    testing_1.it('Should hide not-selected items from the selected list', function () {
        var cmp = initCmp();
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemNotSelectedNoFilter, 'selected')).toBe(true);
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemNotSelectedFilteredOutSelected, 'selected')).toBe(true);
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemNotSelectedFilteredOutSelectable, 'selected')).toBe(true);
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemNotSelectedFilteredOutBoth, 'selected')).toBe(true);
    });
    testing_1.it('Should hide filtered out selectable items from the selectable list', function () {
        var cmp = initCmp();
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemNotSelectedFilteredOutSelectable, 'selectable')).toBe(true);
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemNotSelectedFilteredOutBoth, 'selectable')).toBe(true);
    });
    testing_1.it('Should hide filtered out selected items from the selected list', function () {
        var cmp = initCmp();
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemSelectedFilteredOutSelected, 'selected')).toBe(true);
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemSelectedFilteredOutBoth, 'selected')).toBe(true);
    });
    testing_1.it('Should not hide non-filtered non-selected items from the selectable list', function () {
        var cmp = initCmp();
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemNotSelectedNoFilter, 'selectable')).toBe(false);
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemNotSelectedFilteredOutSelected, 'selectable')).toBe(false);
    });
    testing_1.it('Should not hide non-filtered selected items from the selected list', function () {
        var cmp = initCmp();
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemSelectedNoFilter, 'selected')).toBe(false);
        testing_1.expect(cmp.shouldHide(fixtures_1.default().itemSelectedFilteredOutSelectable, 'selected')).toBe(false);
    });
});
// Instantiate component and initialize values
function initCmp(selectable, selected) {
    var cmp = new co_selectable_items_cmp_1.CoSelectableItemsCmp();
    cmp.selectableItems = selectable || fixtures_1.default().initSelectable;
    cmp.selectedItems = selected || fixtures_1.default().initSelected;
    cmp.initValues();
    return cmp;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9jby1zZWxlY3RhYmxlLWl0ZW1zLWNtcC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJFQUEyRTs7QUFFM0Usd0JBQW1DLGtCQUNuQyxDQUFDLENBRG9EO0FBQ3JELHlCQUFxQixZQUNyQixDQUFDLENBRGdDO0FBQ2pDLHdDQUFxQyxtREFFckMsQ0FBQyxDQUZ1RjtBQUV4RixrQkFBUSxDQUFDLHNCQUFzQixFQUFFO0lBQy9CLFlBQUUsQ0FBQyxtQkFBbUIsRUFBRTtRQUN0QixnQkFBTSxDQUFDLDhDQUFvQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDNUMsQ0FBQyxDQUFDLENBQUE7SUFFRixZQUFFLENBQUMsb0NBQW9DLEVBQUU7UUFDdkMsSUFBSSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUE7UUFDbkIsZ0JBQU0sQ0FBQyxrQkFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUMxRCxDQUFDLENBQUMsQ0FBQTtJQUVGLFlBQUUsQ0FBQyxzRkFBc0YsRUFBRTtRQUN6RixJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLGtCQUFRLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFBO1FBQ2xFLGdCQUFNLENBQUMsa0JBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUE7SUFDMUQsQ0FBQyxDQUFDLENBQUE7SUFFRixZQUFFLENBQUMsaURBQWlELEVBQUU7UUFDcEQsSUFBSSxHQUFHLEdBQUcsSUFBSSw4Q0FBb0IsRUFBRSxDQUFBO1FBQ3BDLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQ2xELGdCQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzVCLENBQUMs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R0FBRyxHQUFHLE9BQU8sRUFBRSxDQUFBO1FBQ25CLGdCQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxrQkFBUSxFQUFFLENBQUMsb0JBQW9CLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDL0UsZ0JBQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGtCQUFRLEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUM5RixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBO0FBRUYsOENBQThDO0FBQzlDLGlCQUFrQixVQUFXLEVBQUUsUUFBUztJQUN0QyxJQUFJLEdBQUcsR0FBRyxJQUFJLDhDQUFvQixFQUFFLENBQUE7SUFDcEMsR0FBRyxDQUFDLGVBQWUsR0FBRyxVQUFVLElBQUksa0JBQVEsRUFBRSxDQUFDLGNBQWMsQ0FBQTtJQUM3RCxHQUFHLENBQUMsYUFBYSxHQUFHLFFBQVEsSUFBSSxrQkFBUSxFQUFFLENBQUMsWUFBWSxDQUFBO0lBQ3ZELEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNoQixNQUFNLENBQUMsR0FBRyxDQUFBO0FBQ1osQ0FBQyIsImZpbGUiOiJ0ZXN0L3VuaXQvY28tc2VsZWN0YWJsZS1pdGVtcy1jbXAuc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi90eXBpbmdzL21haW4vYW1iaWVudC9qYXNtaW5lL2phc21pbmUuZC50c1wiIC8+XG5cbmltcG9ydCB7aXQsIGRlc2NyaWJlLCBleHBlY3R9IGZyb20gJ2FuZ3VsYXIyL3Rlc3RpbmcnXG5pbXBvcnQgZml4dHVyZXMgZnJvbSAnLi9maXh0dXJlcydcbmltcG9ydCB7IENvU2VsZWN0YWJsZUl0ZW1zQ21wIH0gZnJvbSAnLi4vLi4vY28tc2VsZWN0YWJsZS1pdGVtcy9jby1zZWxlY3RhYmxlLWl0ZW1zLWNtcCdcblxuZGVzY3JpYmUoJ0NvU2VsZWN0YWJsZUl0ZW1zQ21wJywgKCkgPT4ge1xuICBpdCgnU2hvdWxkIGJlIGRlZmluZWQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KENvU2VsZWN0YWJsZUl0ZW1zQ21wKS50b0JlRGVmaW5lZCgpXG4gIH0pXG5cbiAgaXQoJ1Nob3VsZCBpbml0aWFsaXNlIHZhbHVlcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgbGV0IGNtcCA9IGluaXRDbXAoKVxuICAgIGV4cGVjdChmaXh0dXJlcygpLmluaXREb25lKS50b0VxdWFsKGNtcC5zZWxlY3RhYmxlSXRlbXMpXG4gIH0pXG5cbiAgaXQoJ1Nob3VsZCBpbml0aWFsaXNlIHZhbHVlcyBjb3JyZWN0bHkgZXZlbiBpZiBvYmplY3QgcHJvcGVydGllcyBhcmUgb3JkZXJlZCBkaWZmZXJlbnRseScsICgpID0+IHtcbiAgICBsZXQgY21wID0gaW5pdENtcChudWxsLCBmaXh0dXJlcygpLmluaXRTZWxlY3RlZERpZmZlcmVudFByb3BPcmRlcilcbiAgICBleHBlY3QoZml4dHVyZXMoKS5pbml0RG9uZSkudG9FcXVhbChjbXAuc2VsZWN0YWJsZUl0ZW1zKVxuICB9KVxuXG4gIGl0KCdTaG91bGQgYmUgYWJsZSB0byBmaWx0ZXIgb24gZXhhY3QgcGFydGlhbCBtYXRjaCcsICgpID0+IHtcbiAgICBsZXQgY21wID0gbmV3IENvU2VsZWN0YWJsZUl0ZW1zQ21wKClcbiAgICBsZXQgbWF0Y2hlZCA9IGNtcC5maWx0ZXJJdGVtKCdTb21lU3RyaW5nJywgJ1NvbWUnKVxuICAgIGV4cGVjdChtYXRjaGVkKS50b0JlKHRydWUpXG4gIH0pXG5cbiAgaXQoJ1Nob3VsZCBiZSBhYmxlIHRvIGZpbHRlciBvbiBjYXNlIGluc2Vuc2l0aXZlIHBhcnRpYWwgbWF0Y2gnLCAoKSA9PiB7XG4gICAgbGV0IGNtcCA9IG5ldyBDb1NlbGVjdGFibGVJdGVtc0NtcCgpXG4gICAgbGV0IG1hdGNoZWQgPSBjbXAuZmlsdGVySXRlbSgnU29tZVN0cmluZycsICdzbycpXG4gICAgZXhwZWN0KG1hdGNoZWQpLnRvQmUodHJ1ZSlcbiAgfSlcblxuICBpdCgnU2hvdWxkIG5vdCBoaWRlIHNlbGVjdGFibGUgd2hlbiBmaWx0ZXJpbmcgc2VsZWN0ZWQnLCAoKSA9PiB7XG4gICAgbGV0IGNtcCA9IG5ldyBDb1NlbGVjdGFibGVJdGVtc0NtcCgpXG4gICAgbGV0IHNlbGVjdGFibGVMaXN0ID0gZml4dHVyZXMoKS5maWx0ZXJJc29sYXRlZEJlZm9yZVxuICAgIGNtcC5maWx0ZXJTZWxlY3RlZChzZWxlY3RhYmxlTGlzdCwgJ1JhbmRvbScpXG4gICAgbGV0IHNlbGVjdGVkRXhwZWN0ZWQgPSBmaXh0dXJlcygpLmZpbHRlcklzb2xhdGVkU2VsZWN0ZWRBZnRlclxuICAgIGV4cGVjdChzZWxlY3RhYmxlTGlzdCkudG9FcXVhbChzZWxlY3RlZEV4cGVjdGVkKVxuICB9KVxuXG4gIGl0KCdTaG91bGQgbm90IGhpZGUgc2VsZWN0ZWQgd2hlbiBmaWx0ZXJpbmcgc2VsZWN0YWJsZScsICgpID0+IHtcbiAgICBsZXQgY21wID0gbmV3IENvU2VsZWN0YWJsZUl0ZW1zQ21wKClcbiAgICBsZXQgc2VsZWN0YWJsZUxpc3QgPSBmaXh0dXJlcygpLmZpbHRlcklzb2xhdGVkQmVmb3JlXG4gICAgY21wLmZpbHRlclNlbGVjdGFibGUoc2VsZWN0YWJsZUxpc3QsICdSYW5kb20nKVxuICAgIGV4cGVjdChzZWxlY3RhYmxlTGlzdCkudG9FcXVhbChmaXh0dXJlcygpLmZpbHRlcklzb2xhdGVkU2VsZWN0YWJsZUFmdGVyKVxuICB9KVxuXG4gIGl0KCdTaG91bGQgYmUgYWJsZSB0byBzZWxlY3QgaXRlbScsICgpID0+IHtcbiAgICBsZXQgY21wID0gaW5pdENtcCgpXG4gICAgY21wLnNlbGVjdEl0ZW0oY21wLnNlbGVjdGFibGVJdGVtc1sxXSlcbiAgICBleHBlY3QoY21wLnNlbGVjdGVkSXRlbXMpLnRvRXF1YWwoZml4dHVyZXMoKS5zZWxlY3RlZEJlYXJTZWxlY3RlZClcbiAgICBleHBlY3QoY21wLnNlbGVjdGFibGVJdGVtcykudG9FcXVhbChmaXh0dXJlcygpLnNlbGVjdGVkQmVhclNlbGVjdGFibGUpXG4gIH0pXG5cbiAgaXQoJ1Nob3VsZCBiZSBhYmxlIHRvIGRlc2VsZWN0IGl0ZW0nLCAoKSA9PiB7XG4gICAgbGV0IGNtcCA9IGluaXRDbXAoKVxuICAgIGNtcC5kZXNlbGVjdEl0ZW0oY21wLnNlbGVjdGFibGVJdGVtc1syXSlcbiAgICBleHBlY3QoY21wLnNlbGVjdGVkSXRlbXMpLnRvRXF1YWwoZml4dHVyZXMoKS5kZXNlbGVjdGVkQ2FjdHVzU2VsZWN0ZWQpXG4gICAgZXhwZWN0KGNtcC5zZWxlY3RhYmxlSXRlbXMpLnRvRXF1YWwoZml4dHVyZXMoKS5kZXNlbGVjdGVkQ2FjdHVzU2VsZWN0YWJsZSlcbiAgfSlcblxuICBpdCgnU2hvdWxkIGRlc2VsZWN0IGl0ZW0gZXZlbiBpZiBvYmplY3QgcHJvcGVydGllcyBhcmUgb3JkZXJlZCBkaWZmZXJlbnRseScsICgpID0+IHtcbiAgICBsZXQgY21wID0gaW5pdENtcChudWxsLCBmaXh0dXJlcygpLmluaXRTZWxlY3RlZERpZmZlcmVudFByb3BPcmRlcilcbiAgICBjbXAuZGVzZWxlY3RJdGVtKGNtcC5zZWxlY3RhYmxlSXRlbXNbMl0pXG4gICAgZXhwZWN0KGNtcC5zZWxlY3RlZEl0ZW1zKS50b0VxdWFsKGZpeHR1cmVzKCkuZGVzZWxlY3RlZENhY3R1c1NlbGVjdGVkKVxuICAgIGV4cGVjdChjbXAuc2VsZWN0YWJsZUl0ZW1zKS50b0VxdWFsKGZpeHR1cmVzKCkuZGVzZWxlY3RlZENhY3R1c1NlbGVjdGFibGUpXG4gIH0pXG5cbiAgaXQoJ1Nob3VsZCBiZSBhYmxlIHRvIHNlbGVjdCBhbGwgZmlsdGVyZWQgaW4gc2VsZWN0YWJsZScsICgpID0+IHtcbiAgICBsZXQgY21wID0gaW5pdENtcCgpXG4gICAgY21wLmZpbHRlclNlbGVjdGFibGUoY21wLnNlbGVjdGFibGVJdGVtcywgJ2EnKVxuICAgIGNtcC5zZWxlY3RBbGxGaWx0ZXJlZCgpXG4gICAgZXhwZWN0KGNtcC5zZWxlY3RhYmxlSXRlbXMpLnRvRXF1YWwoZml4dHVyZXMoKS5zZWxlY3RGaWx0ZXJlZFNlbGVjdGFibGUpXG4gICAgZXhwZWN0KGNtcC5zZWxlY3RlZEl0ZW1zKS50b0VxdWFsKGZpeHR1cmVzKCkuc2VsZWN0RmlsdGVyZWRTZWxlY3RlZClcbiAgfSlcblxuICBpdCgnU2hvdWxkIGJlIGFibGUgdG8gZGVzZWxlY3QgYWxsIGZpbHRlcmVkIGluIHNlbGVjdGVkJywgKCkgPT4ge1xuICAgIGxldCBjbXAgPSBpbml0Q21wKClcbiAgICBjbXAuZmlsdGVyU2VsZWN0ZWQoY21wLnNlbGVjdGFibGVJdGVtcywgJ2FjJylcbiAgICBjbXAuZGVzZWxlY3RBbGxGaWx0ZXJlZCgpXG4gICAgZXhwZWN0KGNtcC5zZWxlY3RhYmxlSXRlbXMpLnRvRXF1YWwoZml4dHVyZXMoKS5kZXNlbGVjdEZpbHRlcmVkU2VsZWN0YWJsZSlcbiAgICBleHBlY3QoY21wLnNlbGVjdGVkSXRlbXMpLnRvRXF1YWwoZml4dHVyZXMoKS5kZXNlbGVjdEZpbHRlcmVkU2VsZWN0ZWQpXG4gIH0pXG5cbiAgLy8gUnVsZXMgZm9yIGhpZGluZyBpdGVtc1xuXG4gIGl0KCdTaG91bGQgaGlkZSBzZWxlY3RlZCBpdGVtcyBmcm9tIHRoZSBzZWxlY3RhYmxlIGxpc3QnLCAoKSA9PiB7XG4gICAgbGV0IGNtcCA9IGluaXRDbXAoKVxuICAgIGV4cGVjdChjbXAuc2hvdWxkSGlkZShmaXh0dXJlcygpLml0ZW1TZWxlY3RlZE5vRmlsdGVyLCAnc2VsZWN0YWJsZScpKS50b0JlKHRydWUpXG4gICAgZXhwZWN0KGNtcC5zaG91bGRIaWRlKGZpeHR1cmVzKCkuaXRlbVNlbGVjdGVkRmlsdGVyZWRPdXRTZWxlY3RlZCwgJ3NlbGVjdGFibGUnKSkudG9CZSh0cnVlKVxuICAgIGV4cGVjdChjbXAuc2hvdWxkSGlkZShmaXh0dXJlcygpLml0ZW1TZWxlY3RlZEZpbHRlcmVkT3V0U2VsZWN0YWJsZSwgJ3NlbGVjdGFibGUnKSkudG9CZSh0cnVlKVxuICAgIGV4cGVjdChjbXAuc2hvdWxkSGlkZShmaXh0dXJlcygpLml0ZW1TZWxlY3RlZEZpbHRlcmVkT3V0Qm90aCwgJ3NlbGVjdGFibGUnKSkudG9CZSh0cnVlKVxuICB9KVxuXG4gIGl0KCdTaG91bGQgaGlkZSBub3Qtc2VsZWN0ZWQgaXRlbXMgZnJvbSB0aGUgc2VsZWN0ZWQgbGlzdCcsICgpID0+IHtcbiAgICBsZXQgY21wID0gaW5pdENtcCgpXG4gICAgZXhwZWN0KGNtcC5zaG91bGRIaWRlKGZpeHR1cmVzKCkuaXRlbU5vdFNlbGVjdGVkTm9GaWx0ZXIsICdzZWxlY3RlZCcpKS50b0JlKHRydWUpXG4gICAgZXhwZWN0KGNtcC5zaG91bGRIaWRlKGZpeHR1cmVzKCkuaXRlbU5vdFNlbGVjdGVkRmlsdGVyZWRPdXRTZWxlY3RlZCwgJ3NlbGVjdGVkJykpLnRvQmUodHJ1ZSlcbiAgICBleHBlY3QoY21wLnNob3VsZEhpZGUoZml4dHVyZXMoKS5pdGVtTm90U2VsZWN0ZWRGaWx0ZXJlZE91dFNlbGVjdGFibGUsICdzZWxlY3RlZCcpKS50b0JlKHRydWUpXG4gICAgZXhwZWN0KGNtcC5zaG91bGRIaWRlKGZpeHR1cmVzKCkuaXRlbU5vdFNlbGVjdGVkRmlsdGVyZWRPdXRCb3RoLCAnc2VsZWN0ZWQnKSkudG9CZSh0cnVlKVxuICB9KVxuXG4gIGl0KCdTaG91bGQgaGlkZSBmaWx0ZXJlZCBvdXQgc2VsZWN0YWJsZSBpdGVtcyBmcm9tIHRoZSBzZWxlY3RhYmxlIGxpc3QnLCAoKSA9PiB7XG4gICAgbGV0IGNtcCA9IGluaXRDbXAoKVxuICAgIGV4cGVjdChjbXAuc2hvdWxkSGlkZShmaXh0dXJlcygpLml0ZW1Ob3RTZWxlY3RlZEZpbHRlcmVkT3V0U2VsZWN0YWJsZSwgJ3NlbGVjdGFibGUnKSkudG9CZSh0cnVlKVxuICAgIGV4cGVjdChjbXAuc2hvdWxkSGlkZShmaXh0dXJlcygpLml0ZW1Ob3RTZWxlY3RlZEZpbHRlcmVkT3V0Qm90aCwgJ3NlbGVjdGFibGUnKSkudG9CZSh0cnVlKVxuICB9KVxuXG4gIGl0KCdTaG91bGQgaGlkZSBmaWx0ZXJlZCBvdXQgc2VsZWN0ZWQgaXRlbXMgZnJvbSB0aGUgc2VsZWN0ZWQgbGlzdCcsICgpID0+IHtcbiAgICBsZXQgY21wID0gaW5pdENtcCgpXG4gICAgZXhwZWN0KGNtcC5zaG91bGRIaWRlKGZpeHR1cmVzKCkuaXRlbVNlbGVjdGVkRmlsdGVyZWRPdXRTZWxlY3RlZCwgJ3NlbGVjdGVkJykpLnRvQmUodHJ1ZSlcbiAgICBleHBlY3QoY21wLnNob3VsZEhpZGUoZml4dHVyZXMoKS5pdGVtU2VsZWN0ZWRGaWx0ZXJlZE91dEJvdGgsICdzZWxlY3RlZCcpKS50b0JlKHRydWUpXG4gIH0pXG5cbiAgaXQoJ1Nob3VsZCBub3QgaGlkZSBub24tZmlsdGVyZWQgbm9uLXNlbGVjdGVkIGl0ZW1zIGZyb20gdGhlIHNlbGVjdGFibGUgbGlzdCcsICgpID0+IHtcbiAgICBsZXQgY21wID0gaW5pdENtcCgpXG4gICAgZXhwZWN0KGNtcC5zaG91bGRIaWRlKGZpeHR1cmVzKCkuaXRlbU5vdFNlbGVjdGVkTm9GaWx0ZXIsICdzZWxlY3RhYmxlJykpLnRvQmUoZmFsc2UpXG4gICAgZXhwZWN0KGNtcC5zaG91bGRIaWRlKGZpeHR1cmVzKCkuaXRlbU5vdFNlbGVjdGVkRmlsdGVyZWRPdXRTZWxlY3RlZCwgJ3NlbGVjdGFibGUnKSkudG9CZShmYWxzZSlcbiAgfSlcblxuICBpdCgnU2hvdWxkIG5vdCBoaWRlIG5vbi1maWx0ZXJlZCBzZWxlY3RlZCBpdGVtcyBmcm9tIHRoZSBzZWxlY3RlZCBsaXN0JywgKCkgPT4ge1xuICAgIGxldCBjbXAgPSBpbml0Q21wKClcbiAgICBleHBlY3QoY21wLnNob3VsZEhpZGUoZml4dHVyZXMoKS5pdGVtU2VsZWN0ZWROb0ZpbHRlciwgJ3NlbGVjdGVkJykpLnRvQmUoZmFsc2UpXG4gICAgZXhwZWN0KGNtcC5zaG91bGRIaWRlKGZpeHR1cmVzKCkuaXRlbVNlbGVjdGVkRmlsdGVyZWRPdXRTZWxlY3RhYmxlLCAnc2VsZWN0ZWQnKSkudG9CZShmYWxzZSlcbiAgfSlcbn0pXG5cbi8vIEluc3RhbnRpYXRlIGNvbXBvbmVudCBhbmQgaW5pdGlhbGl6ZSB2YWx1ZXNcbmZ1bmN0aW9uIGluaXRDbXAgKHNlbGVjdGFibGU/LCBzZWxlY3RlZD8pIHtcbiAgbGV0IGNtcCA9IG5ldyBDb1NlbGVjdGFibGVJdGVtc0NtcCgpXG4gIGNtcC5zZWxlY3RhYmxlSXRlbXMgPSBzZWxlY3RhYmxlIHx8IGZpeHR1cmVzKCkuaW5pdFNlbGVjdGFibGVcbiAgY21wLnNlbGVjdGVkSXRlbXMgPSBzZWxlY3RlZCB8fCBmaXh0dXJlcygpLmluaXRTZWxlY3RlZFxuICBjbXAuaW5pdFZhbHVlcygpXG4gIHJldHVybiBjbXBcbn0iXSwic291cmNlUm9vdCI6Ii9ub2RlX21vZHVsZXMifQ==
