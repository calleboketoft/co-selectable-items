"use strict";
var co_selectable_items_cmp_page_object_1 = require('./co-selectable-items-cmp.page-object');
describe('SelectableItems', function () {
    beforeEach(function () {
        browser.get('/');
    });
    var pageObject = new co_selectable_items_cmp_page_object_1.CoSelectableItemsPageObject();
    it('should display items properly after initialisation', function () {
        var expectedSelectable = ['Bear', 'Fire', 'Calle'];
        expect(pageObject.getSelectableItems().getText()).toEqual(expectedSelectable);
        var expectedSelected = ['Strawberry', 'Cactus'];
        expect(pageObject.getSelectedItems().getText()).toEqual(expectedSelected);
    });
    it('should be able to select a specific item', function () {
        pageObject.getItemsByText(pageObject.getSelectableItems(), 'Bear').click();
        expect(pageObject.getSelectableItems().getText()).toEqual(['Fire', 'Calle']);
    });
    it('should be able to deselect a specific item', function () {
        pageObject.getItemsByText(pageObject.getSelectedItems(), 'Strawberry').click();
        expect(pageObject.getSelectedItems().getText()).toEqual(['Cactus']);
    });
    var expectedAll = ['Strawberry', 'Bear', 'Cactus', 'Fire', 'Calle'];
    it('should be able to select all without filter', function () {
        pageObject.selectAllItems();
        expect(pageObject.getSelectableItems().getText()).toEqual([]);
        expect(pageObject.getSelectedItems().getText()).toEqual(expectedAll);
    });
    it('should be able to deselect all without filter', function () {
        pageObject.deselectAllItems();
        expect(pageObject.getSelectableItems().getText()).toEqual(expectedAll);
        expect(pageObject.getSelectedItems().getText()).toEqual([]);
    });
    // TODO for some reason the tests below fail, fix
    // it('should be able to select all based on filter', () => {
    //   pageObject.selectAllItems('a')
    //   expect(pageObject.getSelectableItems().getText()).toEqual(['Fire'])
    //   let expectedSelected = ['Strawberry', 'Bear', 'Cactus', 'Calle']
    //   expect(pageObject.getSelectedItems().getText()).toEqual(expectedSelected)
    // })
    // it('should be able to deselect all based on filter', () => {
    //   pageObject.deselectAllItems('c')
    //   let expectedSelectable = ['Bear', 'Cactus', 'Fire', 'Calle']
    //   expect(pageObject.getSelectedItems().getText()).toEqual(['Strawberry'])
    //   expect(pageObject.getSelectableItems().getText()).toEqual(expectedSelectable)
    // })
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL2NvLXNlbGVjdGFibGUtaXRlbXMtY21wLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVFBLG9EQUE0Qyx1Q0FFNUMsQ0FBQyxDQUZrRjtBQUVuRixRQUFRLENBQUMsaUJBQWlCLEVBQUU7SUFFMUIsVUFBVSxDQUFDO1FBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNsQixDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUksVUFBVSxHQUFnQyxJQUFJLGlFQUEyQixFQUFFLENBQUE7SUFFL0UsRUFBRSxDQUFDLG9EQUFvRCxFQUFFO1FBQ3ZELElBQUksa0JBQWtCLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ2xELE1BQU0sQ0FBQyxVQUFVLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1FBRTdFLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFDL0MsTUFBTSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUE7SUFDM0UsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsMENBQTBDLEVBQUU7UUFDN0MsVUFBVSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUMxRSxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQTtJQUM5RSxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRTtRQUMvQyxVQUFVLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQzlFLE1BQU0sQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDckUsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFJLFdBQVcsR0FBRyxDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUVuRSxFQUFFLENBQUMsNkNBQTZDLEVBQUU7UUFDaEQsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQzNCLE1BQU0sQ0FBQyxVQUFVLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUM3RCxNQUFNLENBQUMsVUFBVSxDQUFDLGdCQUFnQixFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDdEUsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsK0NBQStDLEVBQUU7UUFDbEQsVUFBVSxDQUFDLGdCQUFnQixFQUFFLENBQUE7UUFDN0IsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3RFLE1BQU0sQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM3RCxDQUFDLENBQUMsQ0FBQTtJQUVGLGlEQUFpRDtJQUVqRCw2REFBNkQ7SUFDN0QsbUNBQW1DO0lBQ25DLHdFQUF3RTtJQUN4RSxxRUFBcUU7SUFDckUsOEVBQThFO0lBQzlFLEtBQUs7SUFFTCwrREFBK0Q7SUFDL0QscUNBQXFDO0lBQ3JDLGlFQUFpRTtJQUNqRSw0RUFBNEU7SUFDNUUsa0ZBQWtGO0lBQ2xGLEtBQUs7QUFDUCxDQUFDLENBQUMsQ0FBQSIsImZpbGUiOiJ0ZXN0L2UyZS9jby1zZWxlY3RhYmxlLWl0ZW1zLWNtcC5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZ2xvYmFscyBmcm9tIHByb3RyYWN0b3JcbmRlY2xhcmUgdmFyIGRlc2NyaWJlOmFueVxuZGVjbGFyZSB2YXIgaXQ6YW55XG5kZWNsYXJlIHZhciBleHBlY3Q6YW55XG5kZWNsYXJlIHZhciBiZWZvcmVFYWNoOmFueVxuZGVjbGFyZSB2YXIgYnJvd3NlcjphbnlcbmRlY2xhcmUgdmFyIGJ5OmFueVxuXG5pbXBvcnQgeyBDb1NlbGVjdGFibGVJdGVtc1BhZ2VPYmplY3QgfSBmcm9tICcuL2NvLXNlbGVjdGFibGUtaXRlbXMtY21wLnBhZ2Utb2JqZWN0J1xuXG5kZXNjcmliZSgnU2VsZWN0YWJsZUl0ZW1zJywgKCkgPT4ge1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGJyb3dzZXIuZ2V0KCcvJylcbiAgfSlcblxuICBsZXQgcGFnZU9iamVjdDogQ29TZWxlY3RhYmxlSXRlbXNQYWdlT2JqZWN0ID0gbmV3IENvU2VsZWN0YWJsZUl0ZW1zUGFnZU9iamVjdCgpXG5cbiAgaXQoJ3Nob3VsZCBkaXNwbGF5IGl0ZW1zIHByb3Blcmx5IGFmdGVyIGluaXRpYWxpc2F0aW9uJywgKCkgPT4ge1xuICAgIGxldCBleHBlY3RlZFNlbGVjdGFibGUgPSBbJ0JlYXInLCAnRmlyZScsICdDYWxsZSddXG4gICAgZXhwZWN0KHBhZ2VPYmplY3QuZ2V0U2VsZWN0YWJsZUl0ZW1zKCkuZ2V0VGV4dCgpKS50b0VxdWFsKGV4cGVjdGVkU2VsZWN0YWJsZSlcblxuICAgIGxldCBleHBlY3RlZFNlbGVjdGVkID0gWydTdHJhd2JlcnJ5JywgJ0NhY3R1cyddXG4gICAgZXhwZWN0KHBhZ2VPYmplY3QuZ2V0U2VsZWN0ZWRJdGVtcygpLmdldFRleHQoKSkudG9FcXVhbChleHBlY3RlZFNlbGVjdGVkKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgYmUgYWJsZSB0byBzZWxlY3QgYSBzcGVjaWZpYyBpdGVtJywgKCkgPT4ge1xuICAgIHBhZ2VPYmplY3QuZ2V0SXRlbXNCeVRleHQocGFnZU9iamVjdC5nZXRTZWxlY3RhYmxlSXRlbXMoKSwgJ0JlYXInKS5jbGljaygpXG4gICAgZXhwZWN0KHBhZ2VPYmplY3QuZ2V0U2VsZWN0YWJsZUl0ZW1zKCkuZ2V0VGV4dCgpKS50b0VxdWFsKFsnRmlyZScsICdDYWxsZSddKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgYmUgYWJsZSB0byBkZXNlbGVjdCBhIHNwZWNpZmljIGl0ZW0nLCAoKSA9PiB7XG4gICAgcGFnZU9iamVjdC5nZXRJdGVtc0J5VGV4dChwYWdlT2JqZWN0LmdldFNlbGVjdGVkSXRlbXMoKSwgJ1N0cmF3YmVycnknKS5jbGljaygpXG4gICAgZXhwZWN0KHBhZ2VPYmplY3QuZ2V0U2VsZWN0ZWRJdGVtcygpLmdldFRleHQoKSkudG9FcXVhbChbJ0NhY3R1cyddKVxuICB9KVxuXG4gIGxldCBleHBlY3RlZEFsbCA9IFsnU3RyYXdiZXJyeScsICdCZWFyJywgJ0NhY3R1cycsICdGaXJlJywgJ0NhbGxlJ11cblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gc2VsZWN0IGFsbCB3aXRob3V0IGZpbHRlcicsICgpID0+IHtcbiAgICBwYWdlT2JqZWN0LnNlbGVjdEFsbEl0ZW1zKClcbiAgICBleHBlY3QocGFnZU9iamVjdC5nZXRTZWxlY3RhYmxlSXRlbXMoKS5nZXRUZXh0KCkpLnRvRXF1YWwoW10pXG4gICAgZXhwZWN0KHBhZ2VPYmplY3QuZ2V0U2VsZWN0ZWRJdGVtcygpLmdldFRleHQoKSkudG9FcXVhbChleHBlY3RlZEFsbClcbiAgfSlcblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZGVzZWxlY3QgYWxsIHdpdGhvdXQgZmlsdGVyJywgKCkgPT4ge1xuICAgIHBhZ2VPYmplY3QuZGVzZWxlY3RBbGxJdGVtcygpXG4gICAgZXhwZWN0KHBhZ2VPYmplY3QuZ2V0U2VsZWN0YWJsZUl0ZW1zKCkuZ2V0VGV4dCgpKS50b0VxdWFsKGV4cGVjdGVkQWxsKVxuICAgIGV4cGVjdChwYWdlT2JqZWN0LmdldFNlbGVjdGVkSXRlbXMoKS5nZXRUZXh0KCkpLnRvRXF1YWwoW10pXG4gIH0pXG5cbiAgLy8gVE9ETyBmb3Igc29tZSByZWFzb24gdGhlIHRlc3RzIGJlbG93IGZhaWwsIGZpeFxuXG4gIC8vIGl0KCdzaG91bGQgYmUgYWJsZSB0byBzZWxlY3QgYWxsIGJhc2VkIG9uIGZpbHRlcicsICgpID0+IHtcbiAgLy8gICBwYWdlT2JqZWN0LnNlbGVjdEFsbEl0ZW1zKCdhJylcbiAgLy8gICBleHBlY3QocGFnZU9iamVjdC5nZXRTZWxlY3RhYmxlSXRlbXMoKS5nZXRUZXh0KCkpLnRvRXF1YWwoWydGaXJlJ10pXG4gIC8vICAgbGV0IGV4cGVjdGVkU2VsZWN0ZWQgPSBbJ1N0cmF3YmVycnknLCAnQmVhcicsICdDYWN0dXMnLCAnQ2FsbGUnXVxuICAvLyAgIGV4cGVjdChwYWdlT2JqZWN0LmdldFNlbGVjdGVkSXRlbXMoKS5nZXRUZXh0KCkpLnRvRXF1YWwoZXhwZWN0ZWRTZWxlY3RlZClcbiAgLy8gfSlcblxuICAvLyBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZGVzZWxlY3QgYWxsIGJhc2VkIG9uIGZpbHRlcicsICgpID0+IHtcbiAgLy8gICBwYWdlT2JqZWN0LmRlc2VsZWN0QWxsSXRlbXMoJ2MnKVxuICAvLyAgIGxldCBleHBlY3RlZFNlbGVjdGFibGUgPSBbJ0JlYXInLCAnQ2FjdHVzJywgJ0ZpcmUnLCAnQ2FsbGUnXVxuICAvLyAgIGV4cGVjdChwYWdlT2JqZWN0LmdldFNlbGVjdGVkSXRlbXMoKS5nZXRUZXh0KCkpLnRvRXF1YWwoWydTdHJhd2JlcnJ5J10pXG4gIC8vICAgZXhwZWN0KHBhZ2VPYmplY3QuZ2V0U2VsZWN0YWJsZUl0ZW1zKCkuZ2V0VGV4dCgpKS50b0VxdWFsKGV4cGVjdGVkU2VsZWN0YWJsZSlcbiAgLy8gfSlcbn0pXG4iXSwic291cmNlUm9vdCI6Ii9ub2RlX21vZHVsZXMifQ==
